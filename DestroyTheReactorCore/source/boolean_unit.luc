module boolean_unit (
    input alufn[6],
    input a[16],
    input b[16],
    output out[16]
  ) {

  always 
  {
    case(alufn[3:0])
    {
       b1000: out = a & b;        // A AND B
       b1110: out = a | b;        // A OR B
       b0110: out = a ^ b;        // A XOR B
       b1010: out = a;            // A
       b1001: out = ! (a & b);    // A NAND B
       b1111: out = ! (a | b);    // A NOR B
       b0111: out = ! (a ^ b);    // A XNOR B
       b1011: out = b;            // B
       b1100: out = a & !b;       // A AND !B
       b1101: out = !a & b;       // !A AND B
       b0100: out = a | !b;       // A OR !B
       b0101: out = !a | b;       // !A OR B
       b0010: out = !a;           // !A
       b0011: out = !b;           // !B
       b0001: out = 16d0;         // FALSE
      default: out = 16d1;        // TRUE
    }
  }
}