/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module missile_fsm_2 (
    input clk,
    input rst,
    input shoot,
    output reg [7:0] test,
    output reg [6:0] out
  );
  
  
  
  localparam IDLE_main_controller = 2'd0;
  localparam START_main_controller = 2'd1;
  localparam SHOOT_main_controller = 2'd2;
  
  reg [1:0] M_main_controller_d, M_main_controller_q = IDLE_main_controller;
  localparam RIGHT_missile_controller = 1'd0;
  localparam LEFT_missile_controller = 1'd1;
  
  reg M_missile_controller_d, M_missile_controller_q = RIGHT_missile_controller;
  wire [7-1:0] M_missile_out;
  reg [1-1:0] M_missile_en;
  reg [7-1:0] M_missile_data;
  register_5 missile (
    .clk(clk),
    .rst(rst),
    .en(M_missile_en),
    .data(M_missile_data),
    .out(M_missile_out)
  );
  wire [8-1:0] M_score_counter_out;
  reg [1-1:0] M_score_counter_en;
  reg [8-1:0] M_score_counter_data;
  register_6 score_counter (
    .clk(clk),
    .rst(rst),
    .en(M_score_counter_en),
    .data(M_score_counter_data),
    .out(M_score_counter_out)
  );
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_alu16_out;
  reg [6-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu16_unit_7 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out)
  );
  
  always @* begin
    M_missile_controller_d = M_missile_controller_q;
    M_main_controller_d = M_main_controller_q;
    M_counter_d = M_counter_q;
    
    M_missile_en = 1'h0;
    M_missile_data = 7'bxxxxxxx;
    test = 7'h00;
    out = 7'h00;
    M_score_counter_en = 1'h0;
    M_score_counter_data = 8'h00;
    M_alu16_a = 16'bxxxxxxxxxxxxxxxx;
    M_alu16_b = 16'bxxxxxxxxxxxxxxxx;
    M_alu16_alufn = 16'bxxxxxxxxxxxxxxxx;
    
    case (M_main_controller_q)
      IDLE_main_controller: begin
        M_missile_en = 1'h1;
        M_missile_data = 7'h08;
        test = 8'h01;
        if (shoot) begin
          M_main_controller_d = START_main_controller;
        end
      end
      START_main_controller: begin
        test = 8'h80;
        out = M_missile_out;
        if (shoot) begin
          M_main_controller_d = SHOOT_main_controller;
        end
        if (M_counter_q[0+24-:25] == 1'h0) begin
          
          case (M_missile_controller_q)
            RIGHT_missile_controller: begin
              if (M_missile_out == 7'h01) begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 17'h186a0;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = LEFT_missile_controller;
              end else begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 17'h186a1;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = RIGHT_missile_controller;
              end
            end
            LEFT_missile_controller: begin
              if (M_missile_out == 7'h40) begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 17'h186a1;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = RIGHT_missile_controller;
              end else begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 17'h186a0;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = LEFT_missile_controller;
              end
            end
          endcase
        end
        M_counter_d = M_counter_q + 1'h1;
      end
      SHOOT_main_controller: begin
        test = 8'h1f;
        if (shoot) begin
          M_missile_en = 1'h1;
          M_missile_data = 7'h08;
          M_main_controller_d = START_main_controller;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_main_controller_q <= 1'h0;
      M_missile_controller_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_main_controller_q <= M_main_controller_d;
      M_missile_controller_q <= M_missile_controller_d;
    end
  end
  
endmodule
