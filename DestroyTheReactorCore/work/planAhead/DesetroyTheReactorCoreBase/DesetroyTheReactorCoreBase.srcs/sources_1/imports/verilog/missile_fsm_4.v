/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module missile_fsm_4 (
    input clk,
    input rst,
    input shoot,
    output reg [6:0] first,
    output reg [6:0] second,
    output reg [6:0] third,
    output reg [6:0] fourth,
    output reg [6:0] fifth,
    output reg [6:0] sixth,
    output reg [6:0] seventh,
    output reg [6:0] eighth,
    output reg [6:0] ninth,
    output reg [7:0] score_out,
    output reg [2:0] lives_out
  );
  
  
  
  wire [7-1:0] M_missile_out;
  reg [1-1:0] M_missile_en;
  reg [7-1:0] M_missile_data;
  register_8 missile (
    .clk(clk),
    .rst(rst),
    .en(M_missile_en),
    .data(M_missile_data),
    .out(M_missile_out)
  );
  wire [7-1:0] M_goal_out;
  reg [1-1:0] M_goal_en;
  reg [7-1:0] M_goal_data;
  register_8 goal (
    .clk(clk),
    .rst(rst),
    .en(M_goal_en),
    .data(M_goal_data),
    .out(M_goal_out)
  );
  wire [7-1:0] M_second_row_out;
  reg [1-1:0] M_second_row_en;
  reg [7-1:0] M_second_row_data;
  register_8 second_row (
    .clk(clk),
    .rst(rst),
    .en(M_second_row_en),
    .data(M_second_row_data),
    .out(M_second_row_out)
  );
  wire [7-1:0] M_third_row_out;
  reg [1-1:0] M_third_row_en;
  reg [7-1:0] M_third_row_data;
  register_8 third_row (
    .clk(clk),
    .rst(rst),
    .en(M_third_row_en),
    .data(M_third_row_data),
    .out(M_third_row_out)
  );
  wire [7-1:0] M_fourth_row_out;
  reg [1-1:0] M_fourth_row_en;
  reg [7-1:0] M_fourth_row_data;
  register_8 fourth_row (
    .clk(clk),
    .rst(rst),
    .en(M_fourth_row_en),
    .data(M_fourth_row_data),
    .out(M_fourth_row_out)
  );
  wire [7-1:0] M_fifth_row_out;
  reg [1-1:0] M_fifth_row_en;
  reg [7-1:0] M_fifth_row_data;
  register_8 fifth_row (
    .clk(clk),
    .rst(rst),
    .en(M_fifth_row_en),
    .data(M_fifth_row_data),
    .out(M_fifth_row_out)
  );
  wire [7-1:0] M_sixth_row_out;
  reg [1-1:0] M_sixth_row_en;
  reg [7-1:0] M_sixth_row_data;
  register_8 sixth_row (
    .clk(clk),
    .rst(rst),
    .en(M_sixth_row_en),
    .data(M_sixth_row_data),
    .out(M_sixth_row_out)
  );
  wire [7-1:0] M_seventh_row_out;
  reg [1-1:0] M_seventh_row_en;
  reg [7-1:0] M_seventh_row_data;
  register_8 seventh_row (
    .clk(clk),
    .rst(rst),
    .en(M_seventh_row_en),
    .data(M_seventh_row_data),
    .out(M_seventh_row_out)
  );
  wire [7-1:0] M_eighth_row_out;
  reg [1-1:0] M_eighth_row_en;
  reg [7-1:0] M_eighth_row_data;
  register_8 eighth_row (
    .clk(clk),
    .rst(rst),
    .en(M_eighth_row_en),
    .data(M_eighth_row_data),
    .out(M_eighth_row_out)
  );
  wire [1-1:0] M_sema_out;
  reg [1-1:0] M_sema_en;
  reg [1-1:0] M_sema_data;
  register_17 sema (
    .clk(clk),
    .rst(rst),
    .en(M_sema_en),
    .data(M_sema_data),
    .out(M_sema_out)
  );
  wire [1-1:0] M_sema_one_out;
  reg [1-1:0] M_sema_one_en;
  reg [1-1:0] M_sema_one_data;
  register_17 sema_one (
    .clk(clk),
    .rst(rst),
    .en(M_sema_one_en),
    .data(M_sema_one_data),
    .out(M_sema_one_out)
  );
  wire [8-1:0] M_score_counter_out;
  reg [1-1:0] M_score_counter_en;
  reg [8-1:0] M_score_counter_data;
  register_19 score_counter (
    .clk(clk),
    .rst(rst),
    .en(M_score_counter_en),
    .data(M_score_counter_data),
    .out(M_score_counter_out)
  );
  localparam IDLE_main_controller = 2'd0;
  localparam START_main_controller = 2'd1;
  localparam SHOOT_main_controller = 2'd2;
  localparam GAME_OVER_main_controller = 2'd3;
  
  reg [1:0] M_main_controller_d, M_main_controller_q = IDLE_main_controller;
  localparam RIGHT_missile_controller = 1'd0;
  localparam LEFT_missile_controller = 1'd1;
  
  reg M_missile_controller_d, M_missile_controller_q = RIGHT_missile_controller;
  localparam SECOND_ROW_missile_shoots = 4'd0;
  localparam THIRD_ROW_missile_shoots = 4'd1;
  localparam FOURTH_ROW_missile_shoots = 4'd2;
  localparam FIFTH_ROW_missile_shoots = 4'd3;
  localparam SIXTH_ROW_missile_shoots = 4'd4;
  localparam SEVENTH_ROW_missile_shoots = 4'd5;
  localparam EIGHTH_ROW_missile_shoots = 4'd6;
  localparam NINTH_ROW_missile_shoots = 4'd7;
  localparam STOP_missile_shoots = 4'd8;
  
  reg [3:0] M_missile_shoots_d, M_missile_shoots_q = SECOND_ROW_missile_shoots;
  localparam RIGHT_AST_asteroid = 1'd0;
  localparam LEFT_AST_asteroid = 1'd1;
  
  reg M_asteroid_d, M_asteroid_q = RIGHT_AST_asteroid;
  wire [7-1:0] M_asteroid_position_out;
  reg [1-1:0] M_asteroid_position_en;
  reg [7-1:0] M_asteroid_position_data;
  register_8 asteroid_position (
    .clk(clk),
    .rst(rst),
    .en(M_asteroid_position_en),
    .data(M_asteroid_position_data),
    .out(M_asteroid_position_out)
  );
  reg [23:0] M_counter_one_d, M_counter_one_q = 1'h0;
  reg [22:0] M_counter_two_d, M_counter_two_q = 1'h0;
  reg [21:0] M_counter_three_d, M_counter_three_q = 1'h0;
  reg [20:0] M_counter_four_d, M_counter_four_q = 1'h0;
  reg [20:0] M_counter_shoot_d, M_counter_shoot_q = 1'h0;
  wire [9-1:0] M_level_out;
  reg [1-1:0] M_level_en;
  reg [9-1:0] M_level_data;
  register_21 level (
    .clk(clk),
    .rst(rst),
    .en(M_level_en),
    .data(M_level_data),
    .out(M_level_out)
  );
  wire [8-1:0] M_lives_out;
  reg [1-1:0] M_lives_en;
  reg [8-1:0] M_lives_data;
  register_19 lives (
    .clk(clk),
    .rst(rst),
    .en(M_lives_en),
    .data(M_lives_data),
    .out(M_lives_out)
  );
  
  wire [25-1:0] M_counter_counter;
  reg [2-1:0] M_counter_signal;
  reg [25-1:0] M_counter_one;
  reg [25-1:0] M_counter_two;
  reg [25-1:0] M_counter_three;
  reg [25-1:0] M_counter_four;
  multiplexer_23 counter (
    .signal(M_counter_signal),
    .one(M_counter_one),
    .two(M_counter_two),
    .three(M_counter_three),
    .four(M_counter_four),
    .counter(M_counter_counter)
  );
  
  localparam ADD = 6'h00;
  
  localparam SUB = 6'h01;
  
  localparam SHL = 6'h20;
  
  localparam SHR = 6'h21;
  
  wire [16-1:0] M_alu16_out;
  reg [6-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu16_unit_24 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out)
  );
  
  always @* begin
    M_missile_shoots_d = M_missile_shoots_q;
    M_missile_controller_d = M_missile_controller_q;
    M_main_controller_d = M_main_controller_q;
    M_asteroid_d = M_asteroid_q;
    M_counter_four_d = M_counter_four_q;
    M_counter_shoot_d = M_counter_shoot_q;
    M_counter_one_d = M_counter_one_q;
    M_counter_two_d = M_counter_two_q;
    M_counter_three_d = M_counter_three_q;
    
    M_missile_en = 1'h0;
    M_missile_data = 7'bxxxxxxx;
    first = 7'h00;
    second = 7'h00;
    third = 7'h00;
    fourth = 7'h00;
    fifth = 7'h00;
    sixth = 7'h00;
    seventh = 7'h00;
    eighth = 7'h00;
    ninth = M_goal_out;
    M_score_counter_en = 1'h0;
    M_score_counter_data = 8'h00;
    M_alu16_a = 16'bxxxxxxxxxxxxxxxx;
    M_alu16_b = 16'bxxxxxxxxxxxxxxxx;
    M_alu16_alufn = 6'bxxxxxx;
    M_goal_en = 1'h0;
    M_goal_data = 7'h00;
    score_out = M_score_counter_out;
    lives_out = M_lives_out;
    M_counter_one = M_counter_one_q;
    M_counter_two = M_counter_two_q;
    M_counter_three = M_counter_three_q;
    M_counter_four = M_counter_four_q;
    M_counter_signal = M_level_out;
    M_level_en = 1'h0;
    M_level_data = 9'bxxxxxxxxx;
    M_second_row_en = 1'h0;
    M_third_row_en = 1'h0;
    M_fourth_row_en = 1'h0;
    M_fifth_row_en = 1'h0;
    M_sixth_row_en = 1'h0;
    M_seventh_row_en = 1'h0;
    M_eighth_row_en = 1'h0;
    M_second_row_data = 7'bxxxxxxx;
    M_third_row_data = 7'bxxxxxxx;
    M_fourth_row_data = 7'bxxxxxxx;
    M_fifth_row_data = 7'bxxxxxxx;
    M_sixth_row_data = 7'bxxxxxxx;
    M_seventh_row_data = 7'bxxxxxxx;
    M_eighth_row_data = 7'bxxxxxxx;
    M_sema_en = 1'h0;
    M_sema_data = 1'bx;
    M_sema_one_en = 1'h0;
    M_sema_one_data = 1'bx;
    M_lives_en = 1'h0;
    M_lives_data = 2'bxx;
    M_asteroid_position_en = 1'h0;
    M_asteroid_position_data = 7'bxxxxxxx;
    
    case (M_main_controller_q)
      IDLE_main_controller: begin
        M_missile_en = 1'h1;
        M_missile_data = 7'h08;
        M_level_en = 1'h1;
        M_level_data = 1'h0;
        M_lives_en = 1'h1;
        M_lives_data = 3'h5;
        M_goal_en = 1'h1;
        M_goal_data = 7'h1c;
        M_score_counter_en = 1'h1;
        M_score_counter_data = 1'h0;
        M_sema_en = 1'h1;
        M_sema_data = 1'h0;
        M_sema_one_en = 1'h1;
        M_sema_one_data = 1'h0;
        M_asteroid_position_en = 1'h1;
        M_asteroid_position_data = 7'h00;
        if (shoot) begin
          M_main_controller_d = START_main_controller;
        end
      end
      START_main_controller: begin
        first = M_missile_out;
        fourth = M_asteroid_position_out;
        if (shoot) begin
          if ((|(M_asteroid_position_out & M_missile_out)) == 1'h1) begin
            M_alu16_alufn = 6'h01;
            M_alu16_a = M_lives_out;
            M_alu16_b = 1'h1;
            M_lives_en = 1'h1;
            M_lives_data = M_alu16_out;
          end else begin
            if ((|(M_missile_out & (M_goal_out))) == 1'h1) begin
              M_alu16_alufn = 6'h00;
              M_alu16_a = M_score_counter_out;
              M_alu16_b = 1'h1;
              M_score_counter_en = 1'h1;
              M_score_counter_data = M_alu16_out;
            end else begin
              M_alu16_alufn = 6'h01;
              M_alu16_a = M_lives_out;
              M_alu16_b = 1'h1;
              M_lives_en = 1'h1;
              M_lives_data = M_alu16_out;
            end
          end
          M_sema_en = 1'h1;
          M_sema_data = M_sema_out + 1'h1;
          M_main_controller_d = SHOOT_main_controller;
        end
        if (M_counter_one_q[0+23-:24] == 1'h0) begin
          
          case (M_asteroid_q)
            RIGHT_AST_asteroid: begin
              if (M_asteroid_position_out == 7'h03) begin
                M_asteroid_position_en = 1'h1;
                M_asteroid_position_data = M_asteroid_position_out << 1'h1;
                M_asteroid_d = LEFT_AST_asteroid;
              end else begin
                M_asteroid_position_en = 1'h1;
                M_asteroid_position_data = M_asteroid_position_out >> 1'h1;
                M_asteroid_d = RIGHT_AST_asteroid;
              end
            end
            LEFT_AST_asteroid: begin
              if (M_asteroid_position_out == 7'h60) begin
                M_asteroid_position_en = 1'h1;
                M_asteroid_position_data = M_asteroid_position_out >> 1'h1;
                M_asteroid_d = RIGHT_AST_asteroid;
              end else begin
                M_asteroid_position_en = 1'h1;
                M_asteroid_position_data = M_asteroid_position_out << 1'h1;
                M_asteroid_d = LEFT_AST_asteroid;
              end
            end
          endcase
        end
        if (M_counter_counter[0+24-:25] == 1'h0) begin
          
          case (M_missile_controller_q)
            RIGHT_missile_controller: begin
              if (M_missile_out == 7'h01) begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 6'h20;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = LEFT_missile_controller;
              end else begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 6'h21;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = RIGHT_missile_controller;
              end
            end
            LEFT_missile_controller: begin
              if (M_missile_out == 7'h40) begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 6'h21;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = RIGHT_missile_controller;
              end else begin
                M_missile_en = 1'h1;
                M_alu16_alufn = 6'h20;
                M_alu16_a = M_missile_out;
                M_alu16_b = 1'h1;
                M_missile_data = M_alu16_out;
                M_missile_controller_d = LEFT_missile_controller;
              end
            end
          endcase
        end
        M_counter_one_d = M_counter_one_q + 1'h1;
        M_counter_two_d = M_counter_two_q + 1'h1;
        M_counter_three_d = M_counter_three_q + 1'h1;
        M_counter_four_d = M_counter_four_q + 1'h1;
      end
      SHOOT_main_controller: begin
        second = M_second_row_out;
        third = M_third_row_out;
        fourth = M_fourth_row_out | M_asteroid_position_out;
        if ((|(M_asteroid_position_out & M_missile_out)) == 1'h0) begin
          fifth = M_fifth_row_out;
          sixth = M_sixth_row_out;
          seventh = M_seventh_row_out;
          eighth = M_eighth_row_out;
        end
        if (M_counter_shoot_q[0+20-:21] == 1'h0) begin
          
          case (M_missile_shoots_q)
            SECOND_ROW_missile_shoots: begin
              M_sema_one_en = 1'h1;
              M_sema_one_data = M_sema_one_out + 1'h1;
              M_second_row_en = 1'h1;
              M_second_row_data = M_missile_out;
              M_missile_shoots_d = THIRD_ROW_missile_shoots;
            end
            THIRD_ROW_missile_shoots: begin
              M_third_row_en = 1'h1;
              M_third_row_data = M_missile_out;
              M_missile_shoots_d = FOURTH_ROW_missile_shoots;
            end
            FOURTH_ROW_missile_shoots: begin
              M_second_row_en = 1'h1;
              M_second_row_data = 7'h00;
              M_fourth_row_en = 1'h1;
              M_fourth_row_data = M_missile_out;
              M_missile_shoots_d = FIFTH_ROW_missile_shoots;
            end
            FIFTH_ROW_missile_shoots: begin
              M_third_row_en = 1'h1;
              M_third_row_data = 7'h00;
              M_fifth_row_en = 1'h1;
              M_fifth_row_data = M_missile_out;
              M_missile_shoots_d = SIXTH_ROW_missile_shoots;
            end
            SIXTH_ROW_missile_shoots: begin
              M_fourth_row_en = 1'h1;
              M_fourth_row_data = 7'h00;
              M_sixth_row_en = 1'h1;
              M_sixth_row_data = M_missile_out;
              M_missile_shoots_d = SEVENTH_ROW_missile_shoots;
            end
            SEVENTH_ROW_missile_shoots: begin
              M_fifth_row_en = 1'h1;
              M_fifth_row_data = 7'h00;
              M_seventh_row_en = 1'h1;
              M_seventh_row_data = M_missile_out;
              M_missile_shoots_d = EIGHTH_ROW_missile_shoots;
            end
            EIGHTH_ROW_missile_shoots: begin
              M_sixth_row_en = 1'h1;
              M_sixth_row_data = 7'h00;
              M_eighth_row_en = 1'h1;
              M_eighth_row_data = M_missile_out;
              M_missile_shoots_d = NINTH_ROW_missile_shoots;
            end
            NINTH_ROW_missile_shoots: begin
              M_seventh_row_en = 1'h1;
              M_seventh_row_data = 7'h00;
              M_eighth_row_en = 1'h1;
              M_eighth_row_data = 7'h00;
              M_missile_shoots_d = STOP_missile_shoots;
            end
            STOP_missile_shoots: begin
              if (M_sema_out == 1'h1) begin
                M_sema_en = 1'h1;
                M_sema_data = M_sema_out + 1'h1;
                M_missile_shoots_d = SECOND_ROW_missile_shoots;
              end
              if (M_sema_one_out == 1'h1) begin
                if (M_score_counter_out == 3'h5) begin
                  M_level_en = 1'h1;
                  M_level_data = 1'h1;
                end else begin
                  if (M_score_counter_out == 4'ha) begin
                    M_level_en = 1'h1;
                    M_level_data = 2'h2;
                  end else begin
                    if (M_score_counter_out == 4'hf) begin
                      M_goal_en = 1'h1;
                      M_goal_data = 7'h14;
                      M_level_en = 1'h1;
                      M_level_data = 1'h1;
                    end else begin
                      if (M_score_counter_out == 5'h14) begin
                        M_level_en = 1'h1;
                        M_level_data = 2'h2;
                      end else begin
                        if (M_score_counter_out == 5'h19) begin
                          M_goal_en = 1'h1;
                          M_goal_data = 7'h1c;
                          M_level_en = 1'h1;
                          M_level_data = 2'h3;
                        end else begin
                          if (M_score_counter_out == 5'h1e) begin
                            M_level_en = 1'h1;
                            M_level_data = 1'h1;
                            M_asteroid_position_en = 1'h1;
                            M_asteroid_position_data = 7'h60;
                          end else begin
                            if (M_score_counter_out == 6'h23) begin
                              M_level_en = 1'h1;
                              M_level_data = 2'h2;
                            end else begin
                              if (M_score_counter_out == 6'h28) begin
                                M_level_en = 1'h1;
                                M_level_data = 2'h3;
                              end else begin
                                if (M_score_counter_out == 6'h2d) begin
                                  M_level_en = 1'h1;
                                  M_level_data = 1'h1;
                                  M_goal_en = 1'h1;
                                  M_goal_data = 7'h08;
                                  M_asteroid_position_en = 1'h1;
                                  M_asteroid_position_data = 7'h00;
                                end else begin
                                  if (M_score_counter_out == 6'h32) begin
                                    M_level_en = 1'h1;
                                    M_level_data = 2'h2;
                                  end else begin
                                    if (M_score_counter_out == 6'h37) begin
                                      M_level_en = 1'h1;
                                      M_level_data = 2'h3;
                                    end else begin
                                      if (M_score_counter_out == 6'h3c) begin
                                        M_level_en = 1'h1;
                                        M_level_data = 1'h1;
                                        M_asteroid_position_en = 1'h1;
                                        M_asteroid_position_data = 7'h60;
                                      end else begin
                                        if (M_score_counter_out == 7'h41) begin
                                          M_level_en = 1'h1;
                                          M_level_data = 2'h2;
                                        end else begin
                                          if (M_score_counter_out == 7'h46) begin
                                            M_level_en = 1'h1;
                                            M_level_data = 2'h3;
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
                M_missile_en = 1'h1;
                M_missile_data = 7'h08;
                M_sema_en = 1'h1;
                M_sema_data = M_sema_out + 1'h1;
                M_second_row_en = 1'h1;
                M_third_row_en = 1'h1;
                M_fourth_row_en = 1'h1;
                M_fifth_row_en = 1'h1;
                M_sixth_row_en = 1'h1;
                M_seventh_row_en = 1'h1;
                M_eighth_row_en = 1'h1;
                M_second_row_data = 7'h00;
                M_third_row_data = 7'h00;
                M_fourth_row_data = 7'h00;
                M_fifth_row_data = 7'h00;
                M_sixth_row_data = 7'h00;
                M_seventh_row_data = 7'h00;
                M_eighth_row_data = 7'h00;
                M_sema_one_en = 1'h1;
                M_sema_one_data = M_sema_one_out + 1'h1;
                if (M_lives_out == 2'h0) begin
                  M_main_controller_d = GAME_OVER_main_controller;
                end else begin
                  if (M_score_counter_out == 7'h63) begin
                    M_main_controller_d = GAME_OVER_main_controller;
                  end else begin
                    M_main_controller_d = START_main_controller;
                  end
                end
              end
            end
          endcase
        end
        M_counter_shoot_d = M_counter_shoot_q + 1'h1;
      end
      GAME_OVER_main_controller: begin
        ninth = 7'h00;
        eighth = 7'h77;
        seventh = 7'h55;
        sixth = 7'h77;
        fifth = 7'h44;
        fourth = 7'h55;
        third = 7'h77;
        second = 7'h00;
        first = 7'h00;
        if (shoot) begin
          M_main_controller_d = IDLE_main_controller;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_one_q <= 1'h0;
      M_counter_two_q <= 1'h0;
      M_counter_three_q <= 1'h0;
      M_counter_four_q <= 1'h0;
      M_counter_shoot_q <= 1'h0;
      M_main_controller_q <= 1'h0;
      M_missile_controller_q <= 1'h0;
      M_missile_shoots_q <= 1'h0;
      M_asteroid_q <= 1'h0;
    end else begin
      M_counter_one_q <= M_counter_one_d;
      M_counter_two_q <= M_counter_two_d;
      M_counter_three_q <= M_counter_three_d;
      M_counter_four_q <= M_counter_four_d;
      M_counter_shoot_q <= M_counter_shoot_d;
      M_main_controller_q <= M_main_controller_d;
      M_missile_controller_q <= M_missile_controller_d;
      M_missile_shoots_q <= M_missile_shoots_d;
      M_asteroid_q <= M_asteroid_d;
    end
  end
  
endmodule
